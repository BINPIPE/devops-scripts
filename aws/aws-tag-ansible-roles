# Usage
# Set a tag call `ansible-roles` which a list separate by comma
# for the role that this instance belongs to
#
# Example:
# `ansible-roles=mongo,docker`
# Will generate
#
# #
# # [mongo]
# # ip
# # [docker]
# # ip
require 'json'

module Aws
  class Ec2
    attr_reader :hostname
    attr_reader :private_ip
    attr_reader :ansible_roles

    def initialize(o = {})
      @ansible_roles = []
      @vars = []
      parse_tag(o)
    end

    def parse_tag(i)
      i["Tags"].each do |tag|
        if tag["Key"].downcase == 'ansible-roles'
          @ansible_roles.concat(tag["Value"].split /[,;]/)
        end

        if tag["Key"].downcase == 'ansible-childroles'
          @ansible_roles.concat(tag["Value"].split /[,;]/)
        end

        if tag["Key"].downcase == 'ansible-vars'
          @vars.concat tag["Value"]
        end
      end

      if ansible_role?
        @private_ip = i["PrivateIpAddress"]
      end
    end

    def vars
      @vars.to_s
    end

    def ansible_role?
      ansible_roles.length >= 1
    end
  end

  class AnsibleTag
    attr_reader :roles_host
    attr_reader :response
    
    def initialize(aws_profile = nil)
      @profile = "--profile #{aws_profile}" if aws_profile
      @roles_host = {}
    end

    def fetch
      # TODO Profile can be pass from cli
      @content ||= `aws ec2 describe-instances --region us-west-2 #{@profile}`
    end

    def find_ansible_host
      hosts = []
      @response = JSON.parse(fetch)

      response["Reservations"].each do |re|
        re['Instances'].each do |i|
          next unless i["Tags"]
          instance = Ec2.new i
          hosts << instance if instance.ansible_role?
        end
      end
      hosts
    end

    def generate(file)
      ansible_hosts = find_ansible_host
      ansible_hosts.each do |h|
        h.ansible_roles.each do |r|
          roles_host[r] = [] if roles_host[r].nil?
          roles_host[r] << h.private_ip
        end
      end

      File.open(file, 'w') do |f|
        f.write "#Auto generate at #{Time.now}\n"
        roles_host.each do |role, hosts|
          f.write "[#{role}]\n"
          hosts.each do |host|
            f.write "#{host} #{host.vars}"
          end
          f.write "\n\n"
        end
      end
      puts "Generate #{roles_host.length} roles, #{ansible_hosts.length} hosts"
    end
  end
end

as = Aws::AnsibleTag.new ARGV[1]
as.generate(ARGV[0] || 'hosts.auto')
